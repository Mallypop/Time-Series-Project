\documentclass[11pt, a4paper]{article} %or article has only section and below, book and report also have chapter: http://texblog.org/2007/07/09/documentclassbook-report-article-or-letter/
\usepackage[utf8]{inputenc} % use utf8 encoding of symbols such as umlaute for maximal compatibility across platforms
\usepackage{caption} % provides commands for handling caption sizes etc.
%\usepackage[a4paper, left=25mm, right=20mm, top=25mm, bottom=20mm]{geometry} % to easily change margin widths: https://www.sharelatex.com/learn/Page_size_and_margins
\usepackage[bottom]{footmisc} % I love footnotes! And they should be down at the bottom of the page!
\usepackage{graphicx} % when using figures and alike
\usepackage[hidelinks]{hyperref} % for hyperreferences (links within the document: references, figures, tables, citations)
\usepackage{euler} % a math font, only for equations and alike; call BEFORE changing the main font; alternatives: mathptmx, fourier,
%\usepackage{gentium} % for a different font; you can also try: cantarell, charter, libertine, gentium, bera, ... http://tex.stackexchange.com/questions/59403/what-font-packages-are-installed-in-tex-live
%------------------------------------------------------------------------------------------------------
%------- text size settings --------------
\setlength{\textwidth}{16cm}%
\setlength{\textheight}{25cm} %23
%(these values were used to fill the page more fully and thus reduce the number of pages!)
\setlength{\topmargin}{-1.5cm} %0
\setlength{\footskip}{1cm} %
%\setlength{\hoffset}{0cm} %
\setlength{\oddsidemargin}{1cm}%
\setlength{\evensidemargin}{-.5cm}%
\setlength{\parskip}{0cm} % Abstand zwischen Absätzen
% ----------------------------------------------------------------
\renewcommand{\textfraction}{0.1} % allows more space to graphics in float
\renewcommand{\topfraction}{0.85}
%\renewcommand{\bottomfraction}{0.65}
\renewcommand{\floatpagefraction}{0.70}
\frenchspacing %http://texwelt.de/wissen/fragen/1154/was-ist-french-spacing-was-macht-frenchspacing
%------------------------------------------------------------------------------------------------------
%------------------------------------------------------------------------------------------------------
\begin{document}
\SweaveOpts{concordance=TRUE}
\title{Time Series Analysis - A Tutorial}
\author{Rosskopf,E.; Cordes, M.; Lumiko, J.}
% for more control, multiple affiliations, line breaks and alike, use the authblk package!!
\date{\today} % !!use package isodate for more control of date formatting!!
\maketitle
\abstract{Tutorial for time series analysis in R... }
\tableofcontents
\section{Introduction}%------------------------------------------------------------------------------------
Needs to be filled out properly with samples and explanations ( dont forget citing !! ).\\
\begin{itemize}
\item Definition time series\\
\item examples in economy, nature, humans,.... \\
\item stochastic/deterministic with dormann revision\\
\item stationary / non stationary \\
\item regression: why time series regression instead of linear standrard regression\\
\item where you need to use time series regression.\\
\end{itemize}
\section{Getting started}%------------------------------------------------------------------------------------
First set your working directory properly, load the dataset and download and check the packages required for this tutorial. 
\subsection{Get started with the data}%------------------------------------------------------------------------------------
Our example 1 contains the CO2 concentration (ppm) in the Atmosphere at the station Mauna Loa on Hawaii. The dataset is composed out of mean monthly data. \\
<<results=hide>>=

url<-"ftp://aftp.cmdl.noaa.gov/products/trends/co2/co2_mm_mlo.txt"
dest<-"~//Arbeitsflaeche/studium/Best Practice R/Time-Series-Project-master/Dataset/test.txt"


download.file(url, dest ) 
co2month=read.table(dest, skip=72)

@

A few useful packages for time series analysis
<<>>=
library(tseries)
library(nlme)
library(car)
library(knitr)
library(xtable)
library(SweaveListingUtils)
library(stats)
library(forecast)
@
and in:\\

http://cran.r-project.org/web/views/TimeSeries.html\\

Another Exemple Datasets are avaliable at:\\

http://www.comp-engine.org/timeseries/browse-data-by-category\\
https://datamarket.com/data/list/?q=provider:tsdl\\

\subsection{Transforming your data into a Time Series}%-----------------------------------------------------------------------------------
The data stored as a dataframe needs to be transformed with the important columns into the class of a time series to continue working on it properly. If you have monthly data you have to set the deltat of the function ts() to deltat=1/12 describing the sampling period parts between successive values xt and xt+1. Your time series should somehow look like table \ref{yourts}.\\
<<results=tex>>=
yourdata = co2month[,c(3,5)]
colnames(yourdata)= c("year", "co2")
attach(yourdata)
xtable(head(yourdata), caption="Your original data")
yourts=ts(co2, c(1958,3),c(2014,10), deltat=1/12)
class(yourts)
@
<<results=tex, echo=FALSE, print=TRUE >>=
print(xtable(yourts, digits=2, label="yourts",caption="Your time series for monthly mean data"), size="\\tiny")
@

\subsection{Data Visualization}%------------------------------------------------------------------------------------
It is important to get a quick overview of your data. Some simple plots for visualization are quite helpful.
\begin{figure}
\centering
<<label=fig1visualize,fig=TRUE, echo=FALSE>>=
plot.ts(yourts,las=1, xlab="Year", ylab="CO2 conc. (ppm)", main="CO2 concentration in the atmosphere")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
points(yourts, col="cornflowerblue" )
k <- 5
lines(year,filter(co2, rep(1/k,k) ),col = 'red', type="l", lwd = 3)
legend("topleft",c("simple moving average", "monthly mean data"),
pch=c(20,20), col=c("red", "cornflowerblue"))
@
\caption{Visualization of the CO2 Concentrations}
\end{figure}

The red line in plot \ref{fig1visualize} was computed with a simple moving average. It is not enough to just run a MA.

\section{Decomposition of Time Series}%-----------------------------------------------------------------------------------------------------
A time serie consists ofo 3 components; a trend component, an irregular (random) component and (if it is a seosonal ts) seasonal component.
We can decompose the ts and plot these components:

\begin{figure}
\centering
<<decompose, fig=TRUE>>=
plot(decompose(yourts)) 

@
\caption{Decomposition of the CO2 Time Series}
\end{figure}

It seems that our data can probably be described using an additive model, since the random fluctuations in the data are roughly constant in size over time (constant seasonal component)


\subsection{Decomposing Non-Seasonal Data}%----------------------------------------------------------------------------------------------------

Our example 2 contains the Measurements of the annual flow of the river Nile at Ashwan 1871–1970. The dataset is in the Package {datasets}. \\
First we visualize our data:
\begin{figure}
\centering
<<>>=
str(Nile)
plot(Nile, main="Annual flow of teh Nile", ylab="Flow [V/a]")
@
\caption{Annual Flow of the Nile}
\end{figure}

A non-seasonal time series consists of a trend and an irregular component. 
To estimate the trend component of a non-seasonal time series that can be described using an additive model, it is common to use a smoothing method, such as calculating the simple moving average of the time series.

The SMA() function in the “TTR” R package can be used to smooth time series data using a simple moving average. 
\begin{figure}
\centering
<<fig=TRUE>>=
library(TTR)
plot(SMA(Nile,n=20))

@
\caption{Trend of the Annual Flow of the Nile}
\end{figure}
We can see that there was a negative trend until 1920 and that it becomes positiv since then. However it is difficult to make a clear statement of the trends, since there are high fluctuations in the data.


Now we can procede plotting the correlograms:
\begin{figure}
\centering
<<fig=TRUE>>=
par(mfrow = c(1, 2))
acf(Nile)
pacf(Nile)
par(mfrow = c(1, 1))
@
\caption{Autocorrelations and Partial autocorrelations.}
\end{figure}

We find a significant autocorrelation at the first lags only, that means that the autocorrelation is not constanst over the time.
At the Partial autocorrelation plot we do not observe a significant autocorrelation. 


\subsection{Decomposing Seasonal Data}%----------------------------------------------------------------------------------------------------

We can see each component with:
<<fig=TRUE>>=
yourts.components<- decompose(yourts)
@
<<echo=FALSE>>=
yourts.components$seasonal
@

It seems that our seasonal component is positiv until the sommer months, were it turns to be negativ and turning to be positiv again in the winter

\begin{figure}
\centering
<< label=decomposition, fig=TRUE>>=
par(mfrow=c(1,2))
#we can see the trend for the first year:
ts.plot(yourts.components$seasonal[1:12])

<< label=seasonal.component, fig=TRUE>>=
ts.plot(aggregate(yourts.components$seasonal))
#and we can see that this seasonal component is constant over all the years

yourts.seasonallyadjusted <- yourts - yourts.components$seasonal
#We can then plot the seasonally adjusted time series using "plot()" 
<< label=seasonallyadjusted, fig=TRUE>>=
plot(yourts, main="TS with seasonal fl.", las=1)
<< label=notseasonallyadjusted, fig=TRUE>>=
plot(yourts.seasonallyadjusted, las=1, main="removed seasonal fluctuation")
par(mfrow=c(1,1))

@
\caption{The seasonal component across the time}
\end{figure}




\section{Forecasts}%----------------------------------------------------------------------------------------------------
We have three different options to make ( up to now)
\begin{enumerate}
  \item predict
  \item Holt Winters
  \item Arima forecasts
\end{enumerate}


\subsection{Forecasting using Exponential Smoothing}%-----------------------------------------------------------------------------------------------

If we have a time series that can be described using an additive model,we can short-time forecast using exponential smoothing.\\
Preconditions:forecast errors are uncorrelated and are normally distributed with mean zero and constant variance.
<<>>=
hw<-HoltWinters(yourts)
#the alpha value tells us the weight of the previous values for the forecasting
#values of alpha that are close to 0 mean that little weight is placed on the most recent observations when making forecasts of future values
#gamma is for the seasonality
plot(hw)

@
Holtwinters just makes forecasts for the time period covered by the original data.If we want to forecast for the future, we need the packeged "forecast".

\begin{figure}
\centering
<<fig=TRUE>>=
hw1<- forecast.HoltWinters(hw, h=12)
#for the next year  
plot.forecast(hw1, main="Prediction for the next year",shadecols = "oldstyle")
#for next 10 years
hw10<- forecast.HoltWinters(hw, h=120)
plot.forecast(hw10, main="Prediction for the next 10 years", shadecols = "oldstyle")
@
\caption{Holt Winters Prediction}
\end{figure}

Here the forecasts for 1913-1920 are plotted as a blue line, the 80% prediction interval as an orange shaded area, and the 95% prediction interval as a yellow shaded area.

The ‘forecast errors’ are calculated as the observed values minus predicted values, for each time point. We can only calculate the forecast errors for the time period covered by our original time series. One measure of the accuracy of the predictive model is the sum-of-squared-errors (SSE) for the in-sample forecast errors.

To calculate a correlogram of the in-sample forecast errors for the CO2 Time series data for lags 1-20, we type:

\begin{figure}
\centering
<<>>=
acf(hw10$residuals, lag.max=20)
@
\caption{Correlogram of the residuals.}
\end{figure}


<<>>=
Box.test(hw10$residuals, lag=20, type="Ljung-Box")
@
There is little evidence of non-zero autocorrelations at lags 1-20.

<<>>=
plotForecastErrors <- function(forecasterrors)
  {
     # make a histogram of the forecast errors:
     mybinsize <- IQR(forecasterrors)/4
     mysd   <- sd(forecasterrors)
     mymin  <- min(forecasterrors) - mysd*5
     mymax  <- max(forecasterrors) + mysd*3
     # generate normally distributed data with mean 0 and standard deviation mysd
     mynorm <- rnorm(10000, mean=0, sd=mysd)
     mymin2 <- min(mynorm)
     mymax2 <- max(mynorm)
     if (mymin2 < mymin) { mymin <- mymin2 }
     if (mymax2 > mymax) { mymax <- mymax2 }
     # make a red histogram of the forecast errors, with the normally distributed data overlaid:
     mybins <- seq(mymin, mymax, mybinsize)
     hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
     # freq=FALSE ensures the area under the histogram = 1
     # generate normally distributed data with mean 0 and standard deviation mysd
     myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
     # plot the normal curve as a blue line on top of the histogram of forecast errors:
     points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
  }
@


\begin{figure}
\centering
<<>>=
plotForecastErrors(hw10$residuals)
@
\caption{Histogram of the errors}
\end{figure}

The histogram of the time series shows that the forecast errors are roughly normally distributed and the mean seems to be close to zero. 


\subsecttion{Seasonal Decomposition of Time Series by Loess}
Forecasting using stl objects:
\begin{figure}
\centering
<<fig=true>>=
plot(stlf(yourts, lambda=0, h =120))
(tslm(yourts~time(yourts)))
@
\caption{}
\end{figure}

\subsection{ARIMA Models}%-----------------------------------------------------------------------------------------------
For the CO2 time series:
<<fig=TRUE>>=
au=auto.arima(yourts, ic = "bic")
arima1=arima(yourts, order = c(au$arma[1],au$arma[6],au$arma[2]))
fore1=forecast.Arima(arima1,h=10)
plot.forecast(fore1)

@

We can first fit an autoregression model to the Nile Time Series:
\begin{figure}
\centering
<<fig=TRUE>>=
ar(Nile) # selects order 2
cpgram(ar(Nile)$resid)
arima(Nile, c(2, 0, 0))

@
\caption{Cumulative Peridiogram of the residuals}
\end{figure}
Fitting a autoregressive model, we can see that the residuals are well placed.

Structural time series models:
\begin{figure}
\centering
<<fig=TRUE>>=
par(mfrow = c(3, 1))
plot(Nile)
## local level model
(fit <- StructTS(Nile, type = "level"))
lines(fitted(fit), lty = 2)              # contemporaneous smoothing
lines(tsSmooth(fit), lty = 2, col = 4)   # fixed-interval smoothing
plot(residuals(fit)); abline(h = 0, lty = 3)
## local trend model
(fit2 <- StructTS(Nile, type = "trend")) ## constant trend fitted
pred <- predict(fit, n.ahead = 30)
## with 50% confidence interval
ts.plot(Nile, pred$pred,
        pred$pred + 0.67*pred$se, pred$pred -0.67*pred$se, col=1:3)


@
\caption{Fitting a Structural Model}
\end{figure}

\subsection{Selecting a Candidate ARIMA Model}%-----------------------------------------------------------------------------------------------


compare both functions of forecasting: 
<<fig=TRUE, eval=FALSE>>=

par(mfrow=c(1,2))
plot(forecast.arima, xlim=c(2010,2025), ylim=c(385,430))
plot.forecast(forecasts2 ,xlim=c(2010,2025), ylim=c(385,430))
@


\section{Links and Further Reading}%-----------------------------------------------------------------------------------------------
\section{Acknowledgements}%------------------------------------------------------------------------------------------------------
Don't forget to thank TeX and R and other opensource communities if you use their products! The correct way to cite R is shown when typing ``\texttt{citation()}'', and ``\texttt{citation("mgcv")}'' for packages.

\clearpage
\end{document}


